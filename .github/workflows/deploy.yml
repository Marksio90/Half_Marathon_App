name: Deploy Half Marathon Predictor

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run unit tests
      run: |
        python -m pytest test_app.py -v --cov=utils --cov-report=xml
      env:
        DO_SPACES_KEY: ${{ secrets.DO_SPACES_KEY }}
        DO_SPACES_SECRET: ${{ secrets.DO_SPACES_SECRET }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        docker build -t halfmarathon-predictor:${{ github.sha }} .
        docker tag halfmarathon-predictor:${{ github.sha }} halfmarathon-predictor:latest
    
    - name: Test Docker image
      run: |
        docker run -d -p 8080:8080 \
          -e DO_SPACES_KEY=${{ secrets.DO_SPACES_KEY }} \
          -e DO_SPACES_SECRET=${{ secrets.DO_SPACES_SECRET }} \
          -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
          -e LANGFUSE_SECRET_KEY=${{ secrets.LANGFUSE_SECRET_KEY }} \
          -e LANGFUSE_PUBLIC_KEY=${{ secrets.LANGFUSE_PUBLIC_KEY }} \
          --name test-app halfmarathon-predictor:latest
        
        # Wait for app to start
        sleep 30
        
        # Check health
        curl -f http://localhost:8080/_stcore/health || exit 1
        
        # Cleanup
        docker stop test-app
        docker rm test-app

  deploy:
    name: Deploy to Digital Ocean
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Deploy to App Platform
      run: |
        # Get app ID
        APP_ID=$(doctl apps list --format ID,Spec.Name | grep "halfmarathon-predictor" | awk '{print $1}')
        
        if [ -z "$APP_ID" ]; then
          echo "Creating new app..."
          doctl apps create --spec app.yaml
        else
          echo "Updating app $APP_ID..."
          doctl apps update $APP_ID --spec app.yaml
        fi
    
    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to complete..."
        sleep 60
    
    - name: Get app URL
      run: |
        APP_ID=$(doctl apps list --format ID,Spec.Name | grep "halfmarathon-predictor" | awk '{print $1}')
        doctl apps get $APP_ID --format DefaultIngress

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()
    
    steps:
    - name: Send Slack notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'Half Marathon Predictor deployment: ${{ job.status }}'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always() && secrets.SLACK_WEBHOOK != ''